package com.darkidiot.curator;import com.google.common.collect.Lists;import com.google.gson.Gson;import lombok.extern.slf4j.Slf4j;import org.apache.curator.RetryPolicy;import org.apache.curator.framework.CuratorFramework;import org.apache.curator.framework.CuratorFrameworkFactory;import org.apache.curator.retry.ExponentialBackoffRetry;import org.apache.curator.retry.RetryNTimes;import org.apache.curator.retry.RetryUntilElapsed;import org.apache.curator.shaded.com.google.common.base.Throwables;import org.apache.zookeeper.CreateMode;import org.apache.zookeeper.ZooDefs;import org.apache.zookeeper.data.ACL;import org.apache.zookeeper.data.Id;import org.apache.zookeeper.data.Stat;import org.apache.zookeeper.server.auth.DigestAuthenticationProvider;import org.junit.Test;import java.security.NoSuchAlgorithmException;import java.util.Arrays;import java.util.List;import static com.darkidiot.curator.Constant.getConnectInfo;/** * TestCurator 测试类 * Copyright (c) for darkidiot * Date:2017/4/10 * Author: <a href="darkidiot@icloud.com">darkidiot</a> * School: CUIT * Desc: */@Slf4jpublic class TestCurator {    @Test    public void testConnect() {        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);        CuratorFramework client = CuratorFrameworkFactory.newClient(getConnectInfo(), 5000, 5000, retryPolicy);        client.start();        log.info("connect ok...");    }    @Test    public void testConnect2() {        RetryPolicy retryPolicy = new RetryNTimes(3, 2000);        CuratorFramework client = CuratorFrameworkFactory.newClient(getConnectInfo(), 5000, 5000, retryPolicy);        client.start();        log.info("connect ok...");    }    @Test    public void testConnect3() {        RetryPolicy retryPolicy = new RetryUntilElapsed(5000, 1000);        CuratorFramework client = CuratorFrameworkFactory.newClient(getConnectInfo(), 5000, 5000, retryPolicy);        client.start();        log.info("connect ok...");    }    @Test    public void testFluentConnect() {        RetryPolicy retryPolicy = new RetryUntilElapsed(5000, 1000);        CuratorFramework client = CuratorFrameworkFactory.builder()                .connectString(getConnectInfo())                .sessionTimeoutMs(5000)                .connectionTimeoutMs(5000)                .retryPolicy(retryPolicy)                .build();        client.start();        log.info("connect ok...");    }    @Test    public void testCreateNode() {        RetryPolicy retryPolicy = new RetryUntilElapsed(5000, 1000);        CuratorFramework client = CuratorFrameworkFactory.builder()                .connectString(getConnectInfo())                .sessionTimeoutMs(5000)                .connectionTimeoutMs(5000)                .retryPolicy(retryPolicy)                .build();        client.start();        log.info("connect ok...");        try {            client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath("/darkidiot", "joe".getBytes());        } catch (Exception e) {            log.error("client create error:{}", Throwables.getStackTraceAsString(e));        }    }    @Test    public void testDeleteNode() {        RetryPolicy retryPolicy = new RetryUntilElapsed(5000, 1000);        CuratorFramework client = CuratorFrameworkFactory.builder()                .connectString(getConnectInfo())                .sessionTimeoutMs(5000)                .connectionTimeoutMs(5000)                .retryPolicy(retryPolicy)                .build();        client.start();        log.info("connect ok...");        try {            client.delete().guaranteed().deletingChildrenIfNeeded().withVersion(-1).forPath("/darkidiot");        } catch (Exception e) {            log.error("client create error:{}", Throwables.getStackTraceAsString(e));        }    }    @Test    public void testGetChildren() {        RetryPolicy retryPolicy = new RetryUntilElapsed(5000, 1000);        CuratorFramework client = CuratorFrameworkFactory.builder()                .connectString(getConnectInfo())                .sessionTimeoutMs(5000)                .connectionTimeoutMs(5000)                .retryPolicy(retryPolicy)                .build();        client.start();        log.info("connect ok...");        try {            List<String> children = client.getChildren().forPath("/darkidiot");            log.info("get children:{}", children);        } catch (Exception e) {            log.error("client create error:{}", Throwables.getStackTraceAsString(e));        }    }    @Test    public void testGetNodeData() {        RetryPolicy retryPolicy = new RetryUntilElapsed(5000, 1000);        CuratorFramework client = CuratorFrameworkFactory.builder()                .connectString(getConnectInfo())                .sessionTimeoutMs(5000)                .connectionTimeoutMs(5000)                .retryPolicy(retryPolicy)                .build();        client.start();        log.info("connect ok...");        try {            Stat stat = new Stat();            byte[] data = client.getData().storingStatIn(stat).forPath("/darkidiot");            log.info("stat:{}", new Gson().toJson(stat));            log.info("get node data:{}", Arrays.toString(data));        } catch (Exception e) {            log.error("client create error:{}", Throwables.getStackTraceAsString(e));        }    }}