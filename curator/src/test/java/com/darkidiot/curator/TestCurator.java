package com.darkidiot.curator;import lombok.extern.slf4j.Slf4j;import org.apache.curator.RetryPolicy;import org.apache.curator.framework.CuratorFramework;import org.apache.curator.framework.CuratorFrameworkFactory;import org.apache.curator.retry.ExponentialBackoffRetry;import org.apache.curator.retry.RetryUntilElapsed;import org.apache.curator.shaded.com.google.common.base.Throwables;import org.apache.zookeeper.CreateMode;import org.junit.Test;import static com.darkidiot.curator.Constant.getConnectInfo;/** * Copyright (c) for darkidiot * Date:2017/4/10 * Author: <a href="darkidiot@icloud.com">darkidiot</a> * School: CUIT * Desc: */@Slf4jpublic class TestCurator {    @Test    public void testConnect() {        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);        CuratorFramework client = CuratorFrameworkFactory.newClient(getConnectInfo(), 5000, 5000, retryPolicy);        client.start();    }    @Test    public void testFluentConnect() {        RetryPolicy retryPolicy = new RetryUntilElapsed(5, 1000);        CuratorFramework client = CuratorFrameworkFactory.builder()                .connectString(getConnectInfo())                .sessionTimeoutMs(5000)                .connectionTimeoutMs(5000)                .retryPolicy(retryPolicy)                .build();        client.start();        try {            client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath("/darkidiot","joe".getBytes());        } catch (Exception e) {            log.error("client create error:{}",Throwables.getStackTraceAsString(e));        }    }}